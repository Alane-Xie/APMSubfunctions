% function moh_LesionIdentification
% routine: moh_LesionIdentification
% interface for lesion identification
% routine with several steps
% can alos be used to generate lesion overlap maps
% -------------------------------------------------
% STEP 1:
%   segment in 4 classes all structural T1 images
%   all controls and patients
%   in two runs:
%   1- a rough estimate of the lesion localisation
%   2- use the result form run 1 as a prior (iterative process)
% -------------------------------------------------
% STEP 2:
%   Spatial smoothing of GM and WM images
%   (controls and patients)
% -------------------------------------------------
% STEP 3:
%   Outlier detection within GM and WM classes
%   Using Fuzzy clustering
%   in 2 parts:
%   1- outliers (positive and negative) in GM
%   2- outliers (positive and negative) in WM
% -------------------------------------------------
% STEP 4:
%   Grouping of outliers within GM and WM (negative values)
%   Generate three different images:
%   1- fuzzy definition of the lesion
%   2- binary (1/0) image of the lesion
%   3- contours of the lesion
% ---------------------------------------------------
% Generate Lesion overlap maps LOM across patients
% and then explore LOM image + list of patients with lesions
%
% ---------------------------------------------------
% Cathy's projects
% Mohamed Seghier, 03.03.2008
% ======================================




% Check SPM version... Need SPM5 and Matlab 7+
clear all

spm('time')
spm('ver', 'spm_spm.m') ;
if ~ismember({spm('ver')}, {'SPM5'}), ...
        error('The script needs SPM5 to run correctly....!!!'); end
if spm_matlab_version_chk('7') < 0, ...
        error('The script needs MATLAB 7 or greater....!!!'); end

global defaults
spm_defaults ;

% for graphical interface
scrsz = get(0,'ScreenSize');
text_color = [0.6 0.6 0.6] ;
edit_color = [0.9 0.9 0.9] ;
pushbutton_color = [0.3 0.3 0.3] ;
go_ok = 0 ; % init



action = menu(' LESION DELINEATION : Select a processing step ...', ...
    'STEP 1 Segmentation-normalisation of structural T1 images      ', ...
    'STEP 2 Smoothing of all segmented-normalised images            ', ...
    'STEP 3 Outlier detection with fuzzy clustering in GM and WM    ', ...
    'STEP 4 Grouping of GM and WM outliers and lesion delineation   ', ...
    '---------------------------------------------------------------',...
    'Exit/Cancel') ;



switch action

    case 1
        % segment in 4 classes all structural T1 images
        % (controls and patients)
        %=============================================================
        % in two steps:
        % 1- a rough estimate of the lesion localisation
        % 2- use the result form step 1 as a prior (iterative process)


        p_anat = spm_select(Inf,'image',...
            'Select the structural T1 images','', pwd) ;
        p0_C4prior = spm_select([0 2],'image',...
            'Select the priors (1st guess) for the EXTRA class','', pwd) ;

        % default values
        % --------------
        n_iter = 2 ; % number of iterations in the new segment
        clean_prob = 1/3 ; % prob value to clean the estimated extra
        clean_size = 100 ; % size threshold to clean the estimated extra


        % graphical interface
        % -------------------
        h = figure('Parent', 0, ...
            'Units', 'Pixels', ...
            'Position', [scrsz(3)/4 scrsz(4)/4 500 360], ...
            'Name','Step 1: normalisation-segmentation of structural images', ...
            'Color', [0.81 0.81 0.81], ...
            'Resize', 'Off', ...
            'Selected', 'On', ...
            'SelectionHighLight', 'On', ...
            'ShareColor', 'On', ...
            'Visible', 'On', ...
            'MenuBar','none',...
            'NextPlot', 'add') ;

        bout1 = uicontrol('BackgroundColor', pushbutton_color, ...
            'Style','pushbutton', ...
            'string', ' Cancel ', ...
            'Units', 'Pixels', ...
            'Position', [350 10 100 30], ...
            'FontAngle','italic',...
            'FontWeight','bold',...
            'FontUnits','points',...
            'FontSize', 12, ...
            'ForegroundColor','w',...
            'HorizontalAlignment', 'center',...
            'Visible', 'On', ...
            'Selected','off',...
            'SelectionHighlight','on', ...
            'Callback',...
            'go_ok = 0 ; close(h) ;');

        bout2 = uicontrol('BackgroundColor', pushbutton_color, ...
            'Style','pushbutton', ...
            'string', ' >> Go ', ...
            'Units', 'Pixels', ...
            'Position', [50 10 100 30], ...
            'FontAngle','italic',...
            'FontWeight','bold',...
            'FontUnits','points',...
            'FontSize', 12, ...
            'ForegroundColor','w',...
            'HorizontalAlignment', 'center',...
            'Visible', 'On', ...
            'Selected','off',...
            'SelectionHighlight','on', ...
            'Callback',...
            'go_ok = 1 ; close(h) ;');

        tx_load1 = uicontrol('BackgroundColor', text_color,...
            'Style','text', ...
            'FontAngle','normal',...
            'FontWeight','bold',...
            'FontUnits','points',...
            'FontSize', 10,...
            'ForegroundColor','w',...
            'HorizontalAlignment', 'center',...
            'Units', 'Pixels', ...
            'HandleVisibility', 'On', ...
            'Visible', 'On', ...
            'Selected','off',...
            'SelectionHighlight','on',...
            'Position', [50 140 400 20], ...
            'String', 'threshold EXTRA: min number of abnormal voxels' ) ;

        var_ed1 = uicontrol('BackgroundColor', edit_color, ...
            'Style','edit', ...
            'FontAngle','normal',...
            'FontWeight','bold',...
            'FontUnits','points',...
            'FontSize', 12,...
            'Units', 'Pixels', ...
            'Position', [50 100 100 30], ...
            'Interruptible', 'On', ...
            'BusyAction' , 'Queue', ...
            'HandleVisibility', 'On', ...
            'SelectionHighlight', 'On', ...
            'Visible', 'On', ...
            'ForegroundColor','k',...
            'String', num2str(100),...
            'Callback',...
            'clean_size = str2num(get(var_ed1, ''String'')) ;' );

        tx_load2 = uicontrol('BackgroundColor', text_color,...
            'Style','text', ...
            'FontAngle','normal',...
            'FontWeight','bold',...
            'FontUnits','points',...
            'FontSize', 10,...
            'ForegroundColor','w',...
            'HorizontalAlignment', 'center',...
            'Units', 'Pixels', ...
            'HandleVisibility', 'On', ...
            'Visible', 'On', ...
            'Selected','off',...
            'SelectionHighlight','on',...
            'Position', [50 220 400 20], ...
            'String', 'threshold EXTRA: min probability for abnormal voxels' ) ;

        var_ed2 = uicontrol('BackgroundColor', edit_color, ...
            'Style','edit', ...
            'FontAngle','normal',...
            'FontWeight','bold',...
            'FontUnits','points',...
            'FontSize', 12,...
            'Units', 'Pixels', ...
            'Position', [50 180 100 30], ...
            'Interruptible', 'On', ...
            'BusyAction' , 'Queue', ...
            'HandleVisibility', 'On', ...
            'SelectionHighlight', 'On', ...
            'Visible', 'On', ...
            'ForegroundColor','k',...
            'String', num2str(1/3),...
            'Callback',...
            'clean_prob = str2num(get(var_ed2, ''String'')) ;' );

        tx_load3 = uicontrol('BackgroundColor', text_color,...
            'Style','text', ...
            'FontAngle','normal',...
            'FontWeight','bold',...
            'FontUnits','points',...
            'FontSize', 10,...
            'ForegroundColor','w',...
            'HorizontalAlignment', 'center',...
            'Units', 'Pixels', ...
            'HandleVisibility', 'On', ...
            'Visible', 'On', ...
            'Selected','off',...
            'SelectionHighlight','on',...
            'Position', [50 300 400 20], ...
            'String', 'number of iterations (i.e. rerun segmentation)' ) ;

        var_ed3 = uicontrol('BackgroundColor', edit_color, ...
            'Style','edit', ...
            'FontAngle','normal',...
            'FontWeight','bold',...
            'FontUnits','points',...
            'FontSize', 12,...
            'Units', 'Pixels', ...
            'Position', [50 260 100 30], ...
            'Interruptible', 'On', ...
            'BusyAction' , 'Queue', ...
            'HandleVisibility', 'On', ...
            'SelectionHighlight', 'On', ...
            'Visible', 'On', ...
            'ForegroundColor','k',...
            'String', num2str(2),...
            'Callback',...
            'n_iter = str2num(get(var_ed3, ''String'')) ;' );

        waitfor(h)

        if go_ok
            for n=1:size(p_anat, 1)

                % step 1
                % ======

                [pth,nam,ext,toto] = spm_fileparts(deblank(p_anat(n,:))) ;
                
                
%                 % to improve the segmentation (unified framework)
%                 % coregister the T1 image to the T1 template
%                 % in ordre to have the T1 image in AC-PC orientation
%                 % %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                 % % Coregister structural 2 template
%                 % %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                 jobs{1}.spatial{1}.coreg{1}.estimate.eoptions.cost_fun = defaults.coreg.estimate.cost_fun ;
%                 jobs{1}.spatial{1}.coreg{1}.estimate.eoptions.sep = defaults.coreg.estimate.sep ;
%                 jobs{1}.spatial{1}.coreg{1}.estimate.eoptions.tol = defaults.coreg.estimate.tol ;
%                 jobs{1}.spatial{1}.coreg{1}.estimate.eoptions.fwhm = defaults.coreg.estimate.fwhm ;
%                 jobs{1}.spatial{1}.coreg{1}.estimate.ref = {fullfile(spm('Dir'), 'templates', 'T1.nii')} ;
%                 jobs{1}.spatial{1}.coreg{1}.estimate.source = {deblank(p_anat(n,:))} ;
%                 jobs{1}.spatial{1}.coreg{1}.estimate.other = {''} ;
%                 disp(sprintf('##### Coregestring T1 image to the template.........'))
%                 spm_jobman('run' , jobs) ;
%                 clear jobs ;
                
                
                V_anat = spm_vol(deblank(p_anat(n,:))) ;

                switch size(p0_C4prior,1)
                    case 0 % standard segmentation in 3 classes
                        opts0.tpm   = char(fullfile(spm('Dir'), 'tpm', 'grey.nii'),...
                            fullfile(spm('Dir'), 'tpm', 'white.nii'),...
                            fullfile(spm('Dir'), 'tpm', 'csf.nii'));
                        opts0.ngaus    = [2 2 2 4];
                        opts0.warpreg  = 1;
                        opts0.warpco   = 25;
                        opts0.biasreg  = 0.01;
                        opts0.biasfwhm = 75;
                        opts0.regtype  = 'mni';
                        opts0.fudge    = 5;
                        opts0.samp     = 3;
                        opts0.msk      = '';

                        opts1 = struct('biascor',0,...
                            'GM',[0 1 0],'WM',[0 1 0],'CSF',[0 1 0],...
                            'cleanup',1);
                        n_iter = 1 ; % only one segmentation run...


                    case 1 % segmentation in 4 classes (EXTRA1)
                        opts0.tpm   = char(fullfile(spm('Dir'), 'tpm', 'grey.nii'),...
                            fullfile(spm('Dir'), 'tpm', 'white.nii'),...
                            fullfile(spm('Dir'), 'tpm', 'csf.nii'),...
                            p0_C4prior);
                        opts0.ngaus    = [2 2 2 1 4];
                        opts0.warpreg  = 1;
                        opts0.warpco   = 25;
                        opts0.biasreg  = 0.01;
                        opts0.biasfwhm = 75;
                        opts0.regtype  = 'mni';
                        opts0.fudge    = 5;
                        opts0.samp     = 3;
                        opts0.msk      = '';

%                         opts1 = struct('biascor',0,...
%                             'GM',[0 1 0],'WM',[0 1 0],'CSF',[0 1 0],...
%                             'EXTRA1',[0 1 0],'cleanup',0);

                        opts1 = struct('biascor',0,...
                            'GM',[0 0 0],'WM',[0 0 0],'CSF',[0 0 0],...
                            'EXTRA1',[0 1 0],'cleanup',0);


                    case 2 % segmentation in 5 classes (EXTRA1, EXTRA2)

                        opts0.tpm   = char(fullfile(spm('Dir'), 'tpm', 'grey.nii'),...
                            fullfile(spm('Dir'), 'tpm', 'white.nii'),...
                            fullfile(spm('Dir'), 'tpm', 'csf.nii'),...
                            p0_C4prior);
                        opts0.ngaus    = [2 2 2 1 1 4];
                        % opts0.ngaus    = [4 2 2 1 1 4];
                        % opts0.ngaus    = [3 3 2 1 1 4];
                        % opts0.ngaus    = [1 1 1 1 1 4];
                        opts0.warpreg  = 1;
                        opts0.warpco   = 25;
                        opts0.biasreg  = 0.01;
                        opts0.biasfwhm = 75;
                        opts0.regtype  = 'mni';
                        opts0.fudge    = 5;
                        opts0.samp     = 3;
                        opts0.msk      = '';

                        opts1 = struct('biascor',0,...
                            'GM',[0 1 0],'WM',[0 1 0],'CSF',[0 1 0],...
                            'EXTRA1',[0 1 0],'EXTRA2',[0 1 0],'cleanup',0);

%                         opts1 = struct('biascor',0,...
%                             'GM',[0 0 0],'WM',[0 0 0],'CSF',[0 0 0],...
%                             'EXTRA1',[0 1 0],'EXTRA2',[0 1 0],'cleanup',0);
                            

                    otherwise
                        error('## Please check your priors...!!!!')
                end

                disp(['/////////////////////// SUBJECT ' num2str(n), ...
                    ' /// iteration 1 ////////////////////////////////'])

                Res = spm_preproc(V_anat, opts0) ;
                disp('################# spm_preproc .............................OK')
                PO = spm_prep2sn(Res) ;
                disp('################# spm_prep2sn .............................OK')
                VG = PO.VG ;
                VF = PO.VF ;
                Tr = PO.Tr ;
                Affine = PO.Affine ;
                flags = PO.flags ;
                fnam          = fullfile(pth,[nam '_seg_sn.mat']);
                if spm_matlab_version_chk('7') >= 0,
                    save(fnam,'-V6','VG','VF','Tr','Affine','flags');
                else
                    save(fnam,'VG','VF','Tr','Affine','flags');
                end;
                % spm_prep2sn(Res) ;
                disp('################# write *_seg_sn.mat transformation........OK')

                % change spm_preproc_write, line 32 to write >= 3 classes
                moh_spm_preproc_write(PO,opts1) ;
                disp('################# spm_preproc_write .......................OK') ;

                for iti=1:(n_iter-1)

                    switch size(p0_C4prior,1)
                        case 1 % previous version with 4 classes
                            % prepare the rough estimate of the lesion
                            pC4 = fullfile(pth , ['wc4' nam ext]) ;
                            vC4 = spm_vol(pC4) ;
                            imC4 = spm_read_vols(vC4) ;

                            %                             imC4 = imC4 .* bwareaopen(imC4 > clean_prob, clean_size) ;
                            %                             vC4.fname = fullfile(pth, ['wc4prior' num2str(iti) nam ext]) ;
                            %                             spm_write_vol(vC4, imC4) ;

                                vC4.fname = fullfile(pth, ['wc4previous' num2str(iti) nam ext]) ;
                                spm_write_vol(vC4, imC4) ;

                            if nnz(find(imC4))
                                imC4_tmp = imC4(find(imC4)) ;
                                thr = max(imC4_tmp) / 2 ; % e.g. half max
                                thr = min(thr, 1/3) ; % avoid very conservative thresholds
                                thr = max(thr, 1/10) ; % avoid very liberal thresholds
                                imC4_cleaned = imC4 > thr ; % exclude small and noisy priors
                                % se(:,:,1)=[0 1 0; 1 1 1; 0 1 0];
                                % se(:,:,2)=ones(3,3);
                                % se(:,:,3)=[0 1 0; 1 1 1; 0 1 0];
                                % imC4_cleaned = imerode(imC4_cleaned, se) ;
                                % imC4_cleaned = imdilate(imC4_cleaned, se) ;
                                imC4_cleaned = bwareaopen(imC4_cleaned, clean_size) ;
                                imC4 = imC4 .* imC4_cleaned ;
                            end
                            vC4.fname = fullfile(pth, ['wc4prior' num2str(iti) nam ext]) ;
                            spm_write_vol(vC4, imC4) ;

                        case 2 % new version with 5 classes
                            % prepare the rough estimate of the lesion
                            pC4 = char(fullfile(pth , ['wc4' nam ext]), ...
                                fullfile(pth , ['wc5' nam ext]));
                            vC4 = spm_vol(pC4) ;
                            imC4 = spm_read_vols(vC4) ;

                            vC4(1).fname = fullfile(pth, ['wc4previous' num2str(iti) nam ext]) ;
                            spm_write_vol(vC4(1), imC4(:,:,:,1)) ;


                            imC4 = sum(imC4, 4) ;
                            % imC4 = imC4 .* bwareaopen(imC4 > clean_prob, clean_size) ;

                            if nnz(find(imC4))
                                imC4_tmp = imC4(find(imC4)) ;
                                thr = max(imC4_tmp) / 2 ; % e.g. half max
                                thr = min(thr, 1/3) ; % avoid very conservative thresholds
                                thr = max(thr, 1/10) ; % avoid very liberal thresholds
                                imC4_cleaned = imC4 > thr ; % exclude small and noisy priors
                                % se(:,:,1)=[0 1 0; 1 1 1; 0 1 0];
                                % se(:,:,2)=ones(3,3);
                                % se(:,:,3)=[0 1 0; 1 1 1; 0 1 0];
                                % imC4_cleaned = imerode(imC4_cleaned, se) ;
                                % imC4_cleaned = imdilate(imC4_cleaned, se) ;
                                imC4_cleaned = bwareaopen(imC4_cleaned, clean_size) ;
                                imC4 = imC4 .* imC4_cleaned ;
                            end

                            vC4(2) = [] ;
                            vC4.fname = fullfile(pth, ['wc4prior' num2str(iti) nam ext]) ;
                            spm_write_vol(vC4, imC4) ;

                    end


                    %                     % prepare the rough estimate of the lesion
                    %                     pC4 = fullfile(pth , ['wc4' nam '.img']) ;
                    %                     vC4 = spm_vol(pC4) ;
                    %                     imC4 = spm_read_vols(vC4) ;
                    %                     imC4 = imC4 .* bwareaopen(imC4 > clean_prob, clean_size) ;
                    %                     vC4.fname = fullfile(pth, ['wc4prior' num2str(iti) nam '.img']) ;
                    %                     spm_write_vol(vC4, imC4) ;

                    % step 2
                    % ======
                    opts0.tpm   = char(fullfile(spm('Dir'), 'tpm', 'grey.nii'),...
                        fullfile(spm('Dir'), 'tpm', 'white.nii'),...
                        fullfile(spm('Dir'), 'tpm', 'csf.nii'),...
                        vC4.fname);
                    opts0.ngaus    = [2 2 2 2 4];
                    opts0.warpreg  = 1;
                    opts0.warpco   = 25;
                    opts0.biasreg  = 0.01;
                    opts0.biasfwhm = 75;
                    opts0.regtype  = 'mni';
                    opts0.fudge    = 5;
                    opts0.samp     = 3;
                    opts0.msk      = '';
                    
                    disp(['////////////////////// SUBJECT ' num2str(n),...
                        ' /// iteration ',num2str(iti+1),' /////////////'])

                    Res = spm_preproc(V_anat, opts0) ;
                    disp('################# spm_preproc .............................OK')
                    PO = spm_prep2sn(Res) ;
                    disp('################# spm_prep2sn .............................OK')
                    VG = PO.VG ;
                    VF = PO.VF ;
                    Tr = PO.Tr ;
                    Affine = PO.Affine ;
                    flags = PO.flags ;
                    fnam          = fullfile(pth,[nam '_seg_sn.mat']);
                    if spm_matlab_version_chk('7') >= 0,
                        save(fnam,'-V6','VG','VF','Tr','Affine','flags');
                    else
                        save(fnam,'VG','VF','Tr','Affine','flags');
                    end;
                    % spm_prep2sn(Res) ;
                    disp('################# write *_seg_sn.mat transformation........OK')

                    % change spm_preproc_write, line 32 to write 4 classes
                    opts1 = struct('biascor',0,...
                        'GM',[0 1 0],'WM',[0 1 0],'CSF',[0 1 0],...
                        'EXTRA1',[0 1 0],'cleanup',1);
                    moh_spm_preproc_write(PO,opts1) ;
                    disp('################# spm_preproc_write .......................OK')
                end


            end
        end



        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


    case 2
        P = spm_select(Inf,'image',...
            'Select the segmented and normalised tissue (GM and WM) images','', pwd) ;

        % default values
        % --------------
        fwhm = [8 8 8] ;

        % graphical interface
        h = figure('Parent', 0, ...
            'Units', 'Pixels', ...
            'Position', [scrsz(3)/4 scrsz(4)/4 500 200], ...
            'Name', 'Step 2: Spatial smoothing of normalised GM and WM', ...
            'Color', [0.81 0.81 0.81], ...
            'Resize', 'Off', ...
            'Selected', 'On', ...
            'SelectionHighLight', 'On', ...
            'ShareColor', 'On', ...
            'Visible', 'On', ...
            'MenuBar','none',...
            'NextPlot', 'add') ;

        bout1 = uicontrol('BackgroundColor', pushbutton_color, ...
            'Style','pushbutton', ...
            'string', ' Cancel ', ...
            'Units', 'Pixels', ...
            'Position', [350 20 100 30], ...
            'FontAngle','italic',...
            'FontWeight','bold',...
            'FontUnits','points',...
            'FontSize', 12, ...
            'ForegroundColor','w',...
            'HorizontalAlignment', 'center',...
            'Visible', 'On', ...
            'Selected','off',...
            'SelectionHighlight','on', ...
            'Callback',...
            'go_ok = 0 ; close(h) ;');

        bout2 = uicontrol('BackgroundColor', pushbutton_color, ...
            'Style','pushbutton', ...
            'string', ' >> Go ', ...
            'Units', 'Pixels', ...
            'Position', [50 20 100 30], ...
            'FontAngle','italic',...
            'FontWeight','bold',...
            'FontUnits','points',...
            'FontSize', 12, ...
            'ForegroundColor','w',...
            'HorizontalAlignment', 'center',...
            'Visible', 'On', ...
            'Selected','off',...
            'SelectionHighlight','on', ...
            'Callback',...
            'go_ok = 1 ; close(h) ;');

        tx_load = uicontrol('BackgroundColor', text_color,...
            'Style','text', ...
            'FontAngle','normal',...
            'FontWeight','bold',...
            'FontUnits','points',...
            'FontSize', 10,...
            'ForegroundColor','w',...
            'HorizontalAlignment', 'center',...
            'Units', 'Pixels', ...
            'HandleVisibility', 'On', ...
            'Visible', 'On', ...
            'Selected','off',...
            'SelectionHighlight','on',...
            'Position', [50 140 300 20], ...
            'String', 'Spatial Smoothing FWHM [mm mm mm]' ) ;

        var_ed = uicontrol('BackgroundColor', edit_color, ...
            'Style','edit', ...
            'FontAngle','normal',...
            'FontWeight','bold',...
            'FontUnits','points',...
            'FontSize', 12,...
            'Units', 'Pixels', ...
            'Position', [50 100 100 30], ...
            'Interruptible', 'On', ...
            'BusyAction' , 'Queue', ...
            'HandleVisibility', 'On', ...
            'SelectionHighlight', 'On', ...
            'Visible', 'On', ...
            'ForegroundColor','k',...
            'String', num2str([8 8 8]),...
            'Callback',...
            'fwhm = str2num(get(var_ed, ''String'')) ;' );

        waitfor(h)

        % Spatial smoothing of GM and WM images
        % (controls and patients)
        %=============================================================
        if go_ok
            jobs{1}.spatial{1}.smooth.fwhm = fwhm ;
            jobs{1}.spatial{1}.smooth.dtype = 0 ;

            jobs{1}.spatial{1}.smooth.data = P ;
            disp(sprintf('##### smoothing of the segmented and normalised tissue images................. '))
            spm_jobman('run' , jobs) ;
            clear jobs ;
        end


        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


    case 3
        % Outlier detection within GM and WM
        % (Fuzzy clustering)
        %=============================================================
        folder_results = spm_select(1, 'dir',...
            'Select a directory to save GM and WM outlier maps','', pwd) ;


        pm = spm_select(1,'image',...
            'Specify the mask (to select voxels of interest in the brain)','', pwd) ;
        % data load for classification of voxels
        pPG = spm_select(Inf,'image',...
            'Select patient smoothed GM images','', pwd) ;
        pPW = spm_select(size(pPG,1),'image',...
            'Select patient smoothed WM images','', pwd) ;
        pCG = spm_select(Inf,'image',...
            'Select controls smoothed GM images','', pwd) ;
        pCW = spm_select(size(pCG,1),'image',...
            'Select controls smoothed WM images','', pwd) ;

        % default parameters
        mask_threshold = 0 ; % or use threshold 2 for F masks
        Lambda = -4 ; % equivalent to the fuzziness index m in FCM (m=1-2/lambda)
        Alpha = 0.5 ; % factor of sensitivity (tunning factor)


        % graphical interface
        % -------------------
        h = figure('Parent', 0, ...
            'Units', 'Pixels', ...
            'Position', [scrsz(3)/4 scrsz(4)/4 500 360], ...
            'Name', 'Step 3: detection of outlier voxels in GM and WM', ...
            'Color', [0.81 0.81 0.81], ...
            'Resize', 'Off', ...
            'Selected', 'On', ...
            'SelectionHighLight', 'On', ...
            'ShareColor', 'On', ...
            'Visible', 'On', ...
            'MenuBar','none',...
            'NextPlot', 'add') ;

        bout1 = uicontrol('BackgroundColor', pushbutton_color, ...
            'Style','pushbutton', ...
            'string', ' Cancel ', ...
            'Units', 'Pixels', ...
            'Position', [350 10 100 30], ...
            'FontAngle','italic',...
            'FontWeight','bold',...
            'FontUnits','points',...
            'FontSize', 12, ...
            'ForegroundColor','w',...
            'HorizontalAlignment', 'center',...
            'Visible', 'On', ...
            'Selected','off',...
            'SelectionHighlight','on', ...
            'Callback',...
            'go_ok = 0 ; close(h) ;');

        bout2 = uicontrol('BackgroundColor', pushbutton_color, ...
            'Style','pushbutton', ...
            'string', ' >> Go ', ...
            'Units', 'Pixels', ...
            'Position', [50 10 100 30], ...
            'FontAngle','italic',...
            'FontWeight','bold',...
            'FontUnits','points',...
            'FontSize', 12, ...
            'ForegroundColor','w',...
            'HorizontalAlignment', 'center',...
            'Visible', 'On', ...
            'Selected','off',...
            'SelectionHighlight','on', ...
            'Callback',...
            'go_ok = 1 ; close(h) ;');

        tx_load1 = uicontrol('BackgroundColor', text_color,...
            'Style','text', ...
            'FontAngle','normal',...
            'FontWeight','bold',...
            'FontUnits','points',...
            'FontSize', 10,...
            'ForegroundColor','w',...
            'HorizontalAlignment', 'center',...
            'Units', 'Pixels', ...
            'HandleVisibility', 'On', ...
            'Visible', 'On', ...
            'Selected','off',...
            'SelectionHighlight','on',...
            'Position', [50 140 400 20], ...
            'String', 'threshold for the mask' ) ;

        var_ed1 = uicontrol('BackgroundColor', edit_color, ...
            'Style','edit', ...
            'FontAngle','normal',...
            'FontWeight','bold',...
            'FontUnits','points',...
            'FontSize', 12,...
            'Units', 'Pixels', ...
            'Position', [50 100 100 30], ...
            'Interruptible', 'On', ...
            'BusyAction' , 'Queue', ...
            'HandleVisibility', 'On', ...
            'SelectionHighlight', 'On', ...
            'Visible', 'On', ...
            'ForegroundColor','k',...
            'String', '0',...
            'Callback',...
            'mask_threshold = str2num(get(var_ed1, ''String'')) ;' );

        tx_load2 = uicontrol('BackgroundColor', text_color,...
            'Style','text', ...
            'FontAngle','normal',...
            'FontWeight','bold',...
            'FontUnits','points',...
            'FontSize', 10,...
            'ForegroundColor','w',...
            'HorizontalAlignment', 'center',...
            'Units', 'Pixels', ...
            'HandleVisibility', 'On', ...
            'Visible', 'On', ...
            'Selected','off',...
            'SelectionHighlight','on',...
            'Position', [50 220 400 20], ...
            'String', 'Lambda = level of fuzziness (negative value)' ) ;

        var_ed2 = uicontrol('BackgroundColor', edit_color, ...
            'Style','edit', ...
            'FontAngle','normal',...
            'FontWeight','bold',...
            'FontUnits','points',...
            'FontSize', 12,...
            'Units', 'Pixels', ...
            'Position', [50 180 100 30], ...
            'Interruptible', 'On', ...
            'BusyAction' , 'Queue', ...
            'HandleVisibility', 'On', ...
            'SelectionHighlight', 'On', ...
            'Visible', 'On', ...
            'ForegroundColor','k',...
            'String', '-4',...
            'Callback',...
            'Lambda = str2num(get(var_ed2, ''String'')) ;' );

        tx_load3 = uicontrol('BackgroundColor', text_color,...
            'Style','text', ...
            'FontAngle','normal',...
            'FontWeight','bold',...
            'FontUnits','points',...
            'FontSize', 10,...
            'ForegroundColor','w',...
            'HorizontalAlignment', 'center',...
            'Units', 'Pixels', ...
            'HandleVisibility', 'On', ...
            'Visible', 'On', ...
            'Selected','off',...
            'SelectionHighlight','on',...
            'Position', [50 300 400 20], ...
            'String', 'Alpha = factor of sensitivity (tunning factor)' ) ;

        var_ed3 = uicontrol('BackgroundColor', edit_color, ...
            'Style','edit', ...
            'FontAngle','normal',...
            'FontWeight','bold',...
            'FontUnits','points',...
            'FontSize', 12,...
            'Units', 'Pixels', ...
            'Position', [50 260 100 30], ...
            'Interruptible', 'On', ...
            'BusyAction' , 'Queue', ...
            'HandleVisibility', 'On', ...
            'SelectionHighlight', 'On', ...
            'Visible', 'On', ...
            'ForegroundColor','k',...
            'String', '0.5',...
            'Callback',...
            'Alpha = str2num(get(var_ed3, ''String'')) ;' );

        waitfor(h)


        if go_ok

            % load of the mask (mask.img)

            vm = spm_vol(pm) ;
            mask = spm_read_vols(vm) > mask_threshold ;

            Vol = find(mask) ;

            c = size(pCG,1) + 1 ; % number of classes = N controls + 1 patient


            % Structure FCP creation
            FCP.files.patients.GM = pPG ;
            FCP.files.patients.WM = pPW ;
            FCP.files.controls.GM = pCG ;
            FCP.files.controls.WM = pCW ;
            FCP.mask.file = pm ;
            FCP.mask.threshold = mask_threshold ;
            FCP.lambda = Lambda ;
            FCP.alpha = Alpha ;
            FCP.size.nvoxels = length(Vol(:)) ;
            FCP.size.nclasses = c ;

            % Alpha = 3*std(XC(:)) ; % std without including the patient
            disp(['## Alpha is set to  = ', num2str(Alpha)])
            % centroid definition
            V = Alpha*eye(c) ;
            disp('Centroid calculation..................OK')


            % Outliers detection for GM images
            % ============================================================
            disp('############## Outlier detection .... GM images.....')

            % prepare control data
            v = spm_vol(pCG) ;
            XC = [] ;
            for i=1:size(pCG,1)
                im = spm_read_vols(v(i)) ;
                XC = [XC,im(mask(:))] ;
            end


            Nvox = size(XC, 1) ;

            disp('Images preparation (reading + masking)..................OK')



            for n=1:size(pPG,1)

                clear U X D bet G* im

                im = spm_read_vols(spm_vol(deblank(pPG(n,:)))) ;
                % X = [im(mask(:)), XC] ;

                % names
                [pth nam ext toto] = spm_fileparts(deblank(pPG(n,:))) ;

                disp(['=========== patient number ',...
                    num2str(n), ' , name: ', nam]) ;

                % distance calculation
                bet = ([im(mask(:)), XC]' - repmat(sum([im(mask(:)), XC]')/c, c,1))'*(V' - repmat(sum(V')/c, c,1)) ./(c-1) ;
                bet = bet ./ repmat(var(V'),Nvox ,1) ;
                D = (1 - tanh(bet)) ;
                D(D == 0) = eps ;


                disp('Distance calculation..................OK')

                % membership degrees calculation for positive effects
                U = [] ;
                U = ( power(D, Lambda) ./ repmat(sum(power(D, Lambda)'), c,1)')' ;

                vU = v(1) ;
                vU.descrip = 'Fuzzy CP classification' ;
                vU.private.descrip = 'Fuzzy CP classification' ;
                vU.fname = fullfile(folder_results,...
                    ['FCP_positive_',nam, ext]) ;
                vU.private.dat.fname = fullfile(folder_results,...
                    ['FCP_positive_',nam, ext]) ;
                img = zeros(vU.dim) ;
                img(Vol(1:Nvox)) = U(1,1:Nvox) ;
                spm_write_vol(vU,img) ;

                Gp = sum(U')/Nvox ;
                disp('calculation of positive effects (P > Cs)..................OK')

                % membership degrees calculation for negative effects
                U = [] ;
                U = ( power(2-D, Lambda) ./ repmat(sum(power(2-D, Lambda)'), c,1)')' ;

                vU.fname = fullfile(folder_results,...
                    ['FCP_negative_',nam, ext]) ;
                vU.private.dat.fname = fullfile(folder_results,...
                    ['FCP_negative_',nam, ext]) ;
                img = zeros(vU.dim) ;
                img(Vol(1:Nvox)) = U(1,1:Nvox) ;
                spm_write_vol(vU,img) ;

                Gn = sum(U')/Nvox ;
                disp('calculation of negative effects (P < Cs)..................OK')

                % % Structure FCP creation
                FCP.GM.U.positive{n} = fullfile(folder_results,...
                    ['FCP_positive_',nam, ext]) ;
                FCP.GM.U.negative{n} = fullfile(folder_results,...
                    ['FCP_negative_',nam, ext]) ;
                FCP.GM.G.positive(n,:) = Gp ;
                FCP.GM.G.negative(n,:) = -Gn ;

            end



            % Outliers detection for GM images
            % ============================================================
            disp('############## Outlier detection .... WM images.....')

            % prepare control data
            v = spm_vol(pCW) ;
            XC = [] ;
            for i=1:size(pCW,1)
                im = spm_read_vols(v(i)) ;
                XC = [XC,im(mask(:))] ;
            end


            disp('Images preparation (reading + masking)..................OK')


            for n=1:size(pPW,1)

                clear U X D bet G* im

                im = spm_read_vols(spm_vol(deblank(pPW(n,:)))) ;
                % X = [im(mask(:)), XC] ;

                % names
                [pth nam ext toto] = spm_fileparts(deblank(pPW(n,:))) ;

                disp(['=========== patient number ',...
                    num2str(n), ' , name: ', nam]) ;

                % distance calculation
                bet = ([im(mask(:)), XC]' - repmat(sum([im(mask(:)), XC]')/c, c,1))'*(V' - repmat(sum(V')/c, c,1)) ./(c-1) ;
                bet = bet ./ repmat(var(V'),Nvox ,1) ;
                D = (1 - tanh(bet)) ;
                D(D == 0) = eps ;


                disp('Distance calculation..................OK')

                % membership degrees calculation for positive effects
                U = [] ;
                U = ( power(D, Lambda) ./ repmat(sum(power(D, Lambda)'), c,1)')' ;

                vU = v(1) ;
                vU.descrip = 'Fuzzy CP classification' ;
                vU.private.descrip = 'Fuzzy CP classification' ;
                vU.fname = fullfile(folder_results,...
                    ['FCP_positive_',nam, ext]) ;
                vU.private.dat.fname = fullfile(folder_results,...
                    ['FCP_positive_',nam, ext]) ;
                img = zeros(vU.dim) ;
                img(Vol(1:Nvox)) = U(1,1:Nvox) ;
                spm_write_vol(vU,img) ;

                Gp = sum(U')/Nvox ;
                disp('calculation of positive effects (P > Cs)..................OK')

                % membership degrees calculation for negative effects
                U = [] ;
                U = ( power(2-D, Lambda) ./ repmat(sum(power(2-D, Lambda)'), c,1)')' ;

                vU.fname = fullfile(folder_results,...
                    ['FCP_negative_',nam, ext]) ;
                vU.private.dat.fname = fullfile(folder_results,...
                    ['FCP_negative_',nam, ext]) ;
                img = zeros(vU.dim) ;
                img(Vol(1:Nvox)) = U(1,1:Nvox) ;
                spm_write_vol(vU,img) ;

                Gn = sum(U')/Nvox ;
                disp('calculation of negative effects (P < Cs)..................OK')

                % % Structure FCP creation
                FCP.WM.U.positive{n} = fullfile(folder_results,...
                    ['FCP_positive_',nam, ext]) ;
                FCP.WM.U.negative{n} = fullfile(folder_results,...
                    ['FCP_negative_',nam, ext]) ;
                FCP.WM.G.positive(n,:) = Gp ;
                FCP.WM.G.negative(n,:) = -Gn ;

            end



            save(fullfile(folder_results, ['FCP_' lower(date) '.mat']), 'FCP') ;

        end
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


    case 4
        % Grouping of outliers within GM and WM
        % Contour detection
        %=============================================================
        folder_results = spm_select(1, 'dir', ...
            'Select a directory to save the results','', pwd) ;

        % select the GM U images
        pG = spm_select(Inf,'image',...
            'Select the FCP images (negative GM)','', pwd) ;

        % select the WM U images
        pW = spm_select(size(pG,1),'image',...
            'Select the FCP images (negative WM) !! in the same order !!','', pwd) ;

        % default parameters
        % ------------------
        thr_size = 100 ; % lesion more than 1cm3 in volume
        thr_U = 0.3 ; % threshold on U values

        % graphical interface
        % -------------------
        h = figure('Parent', 0, ...
            'Units', 'Pixels', ...
            'Position', [scrsz(3)/4 scrsz(4)/4 500 260], ...
            'Name', 'Step 4: generate the fuzzy and binary maps and lesion contours', ...
            'Color', [0.81 0.81 0.81], ...
            'Resize', 'Off', ...
            'Selected', 'On', ...
            'SelectionHighLight', 'On', ...
            'ShareColor', 'On', ...
            'Visible', 'On', ...
            'MenuBar','none',...
            'NextPlot', 'add') ;

        bout1 = uicontrol('BackgroundColor', pushbutton_color, ...
            'Style','pushbutton', ...
            'string', ' Cancel ', ...
            'Units', 'Pixels', ...
            'Position', [350 10 100 30], ...
            'FontAngle','italic',...
            'FontWeight','bold',...
            'FontUnits','points',...
            'FontSize', 12, ...
            'ForegroundColor','w',...
            'HorizontalAlignment', 'center',...
            'Visible', 'On', ...
            'Selected','off',...
            'SelectionHighlight','on', ...
            'Callback',...
            'go_ok = 0 ; close(h) ;');

        bout2 = uicontrol('BackgroundColor', pushbutton_color, ...
            'Style','pushbutton', ...
            'string', ' >> Go ', ...
            'Units', 'Pixels', ...
            'Position', [50 10 100 30], ...
            'FontAngle','italic',...
            'FontWeight','bold',...
            'FontUnits','points',...
            'FontSize', 12, ...
            'ForegroundColor','w',...
            'HorizontalAlignment', 'center',...
            'Visible', 'On', ...
            'Selected','off',...
            'SelectionHighlight','on', ...
            'Callback',...
            'go_ok = 1 ; close(h) ;');

        tx_load1 = uicontrol('BackgroundColor', text_color,...
            'Style','text', ...
            'FontAngle','normal',...
            'FontWeight','bold',...
            'FontUnits','points',...
            'FontSize', 10,...
            'ForegroundColor','w',...
            'HorizontalAlignment', 'center',...
            'Units', 'Pixels', ...
            'HandleVisibility', 'On', ...
            'Visible', 'On', ...
            'Selected','off',...
            'SelectionHighlight','on',...
            'Position', [50 140 400 20], ...
            'String', 'binary lesion and contours: spatial (size) threshold' ) ;

        var_ed1 = uicontrol('BackgroundColor', edit_color, ...
            'Style','edit', ...
            'FontAngle','normal',...
            'FontWeight','bold',...
            'FontUnits','points',...
            'FontSize', 12,...
            'Units', 'Pixels', ...
            'Position', [50 100 100 30], ...
            'Interruptible', 'On', ...
            'BusyAction' , 'Queue', ...
            'HandleVisibility', 'On', ...
            'SelectionHighlight', 'On', ...
            'Visible', 'On', ...
            'ForegroundColor','k',...
            'String', '100',...
            'Callback',...
            'thr_size = str2num(get(var_ed1, ''String'')) ;' );

        tx_load2 = uicontrol('BackgroundColor', text_color,...
            'Style','text', ...
            'FontAngle','normal',...
            'FontWeight','bold',...
            'FontUnits','points',...
            'FontSize', 10,...
            'ForegroundColor','w',...
            'HorizontalAlignment', 'center',...
            'Units', 'Pixels', ...
            'HandleVisibility', 'On', ...
            'Visible', 'On', ...
            'Selected','off',...
            'SelectionHighlight','on',...
            'Position', [50 220 400 20], ...
            'String', 'binary lesion and contours: intensity (U) threshold' ) ;

        var_ed2 = uicontrol('BackgroundColor', edit_color, ...
            'Style','edit', ...
            'FontAngle','normal',...
            'FontWeight','bold',...
            'FontUnits','points',...
            'FontSize', 12,...
            'Units', 'Pixels', ...
            'Position', [50 180 100 30], ...
            'Interruptible', 'On', ...
            'BusyAction' , 'Queue', ...
            'HandleVisibility', 'On', ...
            'SelectionHighlight', 'On', ...
            'Visible', 'On', ...
            'ForegroundColor','k',...
            'String', '0.3',...
            'Callback',...
            'thr_U = str2num(get(var_ed2, ''String'')) ;' );


        waitfor(h)


        if go_ok

            vG = spm_vol(pG) ;
            vW = spm_vol(pW) ;
            vo = vG(1) ; % V structure for the output file


            % read all images
            for i=1:size(pG,1)
                imG = spm_read_vols(vG(i)) ;
                imW = spm_read_vols(vW(i)) ;

                imLesion = max(imG,imW) ;
                mask_lesion = imLesion > thr_U ;
                mask_lesion = bwareaopen(mask_lesion, thr_size, 18) ;
                mask_contour = imdilate(mask_lesion, ...
                    reshape([[0 1 0; 1 1 1; 0 1 0];ones(3,3);[0 1 0; 1 1 1; 0 1 0]], 3,3,3)) - mask_lesion ;

                disp(['######## Lesion mask for patient number:  ', num2str(i)])
                [pth nam ext toto] =  spm_fileparts(deblank(pG(i,:))) ;
                ind = find(ismember(nam, '_')) ;
                file_binarymask = fullfile(folder_results,...
                    ['Lesion_binary_' nam(ind(2)+1:end), ext]) ;
                file_fuzzyset = fullfile(folder_results,...
                    ['Lesion_fuzzy_' nam(ind(2)+1:end), ext]) ;
                file_contour = fullfile(folder_results,...
                    ['Lesion_contour_' nam(ind(2)+1:end), ext]) ;
                vo.fname = file_binarymask ;
                spm_write_vol(vo, mask_lesion) ;
                vo.fname = file_fuzzyset ;
                spm_write_vol(vo, imLesion) ;
                vo.fname = file_contour ;
                spm_write_vol(vo, mask_contour) ;



            end

        end

        
    case 6
        disp('############ the script is cancelled without action ! ##############')

        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


    otherwise
        disp('############ Error: check your display properties......')

end


